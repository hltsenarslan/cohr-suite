// <auto-generated />
using System;
using Core.Api.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Core.Api.Infrastructure.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    partial class CoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Api.Domain.DomainMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PathMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("TenantSlug")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Host")
                        .IsUnique();

                    b.ToTable("DomainMappings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Host = "pys.local",
                            IsActive = true,
                            Module = "performance",
                            PathMode = "slug"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Host = "pay.local",
                            IsActive = true,
                            Module = "compensation",
                            PathMode = "slug"
                        });
                });

            modelBuilder.Entity("Core.Api.Domain.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'utc'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0cb8251-16bc-6bde-cc66-5d76b0c7b0ac"),
                            CreatedAt = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Firm 1",
                            Slug = "firm1",
                            Status = "active"
                        },
                        new
                        {
                            Id = new Guid("44709835-d55a-ef2a-2327-5fdca19e55d8"),
                            CreatedAt = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Firm 2",
                            Slug = "firm2",
                            Status = "active"
                        });
                });

            modelBuilder.Entity("Core.Api.Domain.TenantDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Host")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("TenantDomains");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333331"),
                            Host = "pys.local",
                            IsDefault = true,
                            TenantId = new Guid("a0cb8251-16bc-6bde-cc66-5d76b0c7b0ac")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333332"),
                            Host = "pay.local",
                            IsDefault = true,
                            TenantId = new Guid("44709835-d55a-ef2a-2327-5fdca19e55d8")
                        });
                });

            modelBuilder.Entity("Core.Api.Domain.TenantDomain", b =>
                {
                    b.HasOne("Core.Api.Domain.Tenant", "Tenant")
                        .WithMany("Domains")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Core.Api.Domain.Tenant", b =>
                {
                    b.Navigation("Domains");
                });
#pragma warning restore 612, 618
        }
    }
}
