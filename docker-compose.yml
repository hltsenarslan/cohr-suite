version: "3.9"

services:
  # ------------------ DB ------------------
  core-db:
    image: postgres:16
    container_name: cohr-core-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: core
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d core" ]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - "5432:5432"  
    volumes:
      - pg-core:/var/lib/postgresql/data
    profiles: [ "db" ]
    restart: unless-stopped

  perf-db:
    image: postgres:16
    container_name: cohr-perf-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: perf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d perf" ]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - "5433:5432"   # local dev için
    volumes:
      - pg-perf:/var/lib/postgresql/data
    profiles: [ "db" ]
    restart: unless-stopped
  
  comp-db:
    image: postgres:16
    container_name: cohr-comp-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: comp
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d comp" ]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - "5434:5432"   # local dev için
    volumes:
      - pg-comp:/var/lib/postgresql/data
    profiles: [ "db" ]
    restart: unless-stopped
  
  files-db:
    image: postgres:16
    container_name: cohr-files-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: files
    healthcheck:
      test: [ "CMD-SHELL","pg_isready -U postgres -d files" ]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes: [ "pg-files:/var/lib/postgresql/data" ]
    ports: [ "5435:5432" ]
    profiles: [ "db" ]
    restart: unless-stopped

  notif-db:
    image: postgres:16
    container_name: cohr-notif-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: notif
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d notif" ]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - "5436:5432"   # local dev için
    volumes:
      - pg-notif:/var/lib/postgresql/data
    profiles: [ "db" ]
    restart: unless-stopped
  
  # ------------------ APIS -------------------
  core-api:
    build:
      context: .
      dockerfile: src/Core.Api/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      ConnectionStrings__Default: Host=postgres;Database=core;Username=postgres;Password=postgres
      JWT__ISSUER: cohr.suite
      JWT__AUDIENCE: cohr.suite.clients
      JWT__SIGNINGKEY: ${JWT_SIGNINGKEY:-dev-super-secret-change}
      JWT__EXPIRESMINUTES: 60
    depends_on:
      core-db:
        condition: service_healthy
    profiles: [ "api" ]
    restart: unless-stopped

  perf-api:
    build:
      context: .
      dockerfile: src/Perf.Api/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      ConnectionStrings__Default: Host=perf-db;Database=perf;Username=postgres;Password=postgres
      JWT__ISSUER: cohr.suite
      JWT__AUDIENCE: cohr.suite.clients
      JWT__SIGNINGKEY: ${JWT_SIGNINGKEY:-dev-super-secret-change}
      JWT__EXPIRESMINUTES: 60
    depends_on:
      perf-db:
        condition: service_healthy
    profiles: [ "api" ]
    restart: unless-stopped

  comp-api:
    build:
      context: .
      dockerfile: src/Comp.Api/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      ConnectionStrings__Default: Host=comp-db;Database=comp;Username=postgres;Password=postgres
      JWT__ISSUER: cohr.suite
      JWT__AUDIENCE: cohr.suite.clients
      JWT__SIGNINGKEY: ${JWT_SIGNINGKEY:-dev-super-secret-change}
      JWT__EXPIRESMINUTES: 60
    depends_on:
      comp-db:
        condition: service_healthy
    profiles: [ "api" ]
    restart: unless-stopped
  
  file-api:
    build:
      context: .
      dockerfile: src/File.Api/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      ConnectionStrings__Default: Host=files-db;Database=files;Username=postgres;Password=postgres
      Jwt__Issuer: cohr.suite
      Jwt__Audience: cohr.suite.clients
      Jwt__Secret: ${JWT_SECRET:-mO9G0w3m2v6yH9kJ7m4y5y6aJmX8rJ8a1H3nQ7fF2yQhO8d6YyS9HQ==}
      Files__Root: /data/files
      Files__MaxUploadMb: "50"
      Files__SigningKey: ${JWT_SIGNINGKEY:-dev-super-secret-change}
    volumes:
      - files-data:/data/files
    depends_on:
      files-db:
        condition: service_healthy
    profiles: [ "api" ]
    restart: unless-stopped

  notify-api:
    build:
      context: .
      dockerfile: src/Notification.Api/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      ConnectionStrings__Default: Host=files-db;Database=notif;Username=postgres;Password=postgres
      Jwt__Issuer: cohr.suite
      Jwt__Audience: cohr.suite.clients
      Jwt__Secret: ${JWT_SECRET:-mO9G0w3m2v6yH9kJ7m4y5y6aJmX8rJ8a1H3nQ7fF2yQhO8d6YyS9HQ==}
    profiles: [ "api" ]
    restart: unless-stopped
  
  gateway:
    build:
      context: .
      dockerfile: ./src/Gateway/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      JWT__ISSUER: cohr.suite
      JWT__AUDIENCE: cohr.suite.clients
      JWT__SIGNINGKEY: ${JWT_SIGNINGKEY:-dev-super-secret-change}
      JWT__EXPIRESMINUTES: 60
    ports:
      - "8080:8080"
    depends_on:
      core-api:
        condition: service_started
      perf-api:
        condition: service_started
      comp-api:
        condition: service_started
      file-api:
        condition: service_started
      notify-api:
        condition: service_started
    profiles: [ "api" ]
    restart: unless-stopped

  # --------------- Observability --------------
  jaeger:
    image: jaegertracing/all-in-one:1.57
    command: [ "--collector.otlp.enabled=true" ]
    ports:
      - "16686:16686"  # UI
      - "4317:4317"    # OTLP gRPC
    profiles: [ "api" ]
    restart: unless-stopped

volumes:
  pg-core:
  pg-perf:
  pg-comp:
  pg-notif:
  pg-files:
  files-data: