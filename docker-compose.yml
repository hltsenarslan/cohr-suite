version: "3.9"

services:
  # ------------------ INFRA ------------------
  postgres:
    image: postgres:16
    container_name: cohr-core-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: core
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d core" ]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - "5432:5432"   # local dev için
    volumes:
      - pg:/var/lib/postgresql/data
    profiles: [ "infra" ]
    restart: unless-stopped

  perf-db:
    image: postgres:16
    container_name: cohr-perf-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: perf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d perf" ]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - "5433:5432"   # local dev için
    volumes:
      - pg-perf:/var/lib/postgresql/data
    profiles: [ "infra" ]
    restart: unless-stopped

  comp-db:
    image: postgres:16
    container_name: cohr-comp-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: comp
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d comp" ]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - "5434:5432"   # local dev için
    volumes:
      - pg-comp:/var/lib/postgresql/data
    profiles: [ "infra" ]
    restart: unless-stopped

  # ------------------ APIS -------------------
  core-api:
    build:
      context: .
      dockerfile: src/Core.Api/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      ConnectionStrings__Default: Host=postgres;Database=core;Username=postgres;Password=postgres
    depends_on:
      postgres:
        condition: service_healthy
    profiles: [ "core" ]
    restart: unless-stopped

  perf-api:
    build:
      context: .
      dockerfile: src/Perf.Api/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      ConnectionStrings__Default: Host=perf-db;Database=perf;Username=postgres;Password=postgres
    depends_on:
      perf-db:
        condition: service_healthy
    profiles: [ "perf" ]
    restart: unless-stopped

  comp-api:
    build:
      context: .
      dockerfile: src/Comp.Api/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      ConnectionStrings__Default: Host=comp-db;Database=comp;Username=postgres;Password=postgres
    depends_on:
      comp-db:
        condition: service_healthy
    profiles: [ "comp" ]
    restart: unless-stopped

  gateway:
    build:
      context: .
      dockerfile: ./src/Gateway/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    ports:
      - "8080:8080"
    depends_on:
      core-api:
        condition: service_started
      perf-api:
        condition: service_started
      comp-api:
        condition: service_started
    profiles: [ "gw" ]
    restart: unless-stopped

  # --------------- Observability --------------
  jaeger:
    image: jaegertracing/all-in-one:1.57
    command: ["--collector.otlp.enabled=true"]
    ports:
      - "16686:16686"  # UI
      - "4317:4317"    # OTLP gRPC
    profiles: [ "obs" ]
    restart: unless-stopped

volumes:
  pg:
  pg-perf:
  pg-comp: